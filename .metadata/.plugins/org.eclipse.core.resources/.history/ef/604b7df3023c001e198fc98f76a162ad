/**
 * Using Mysql and application flow
 * 
 * Controller-->DTO--->Service--->Respository(DAO)--->Entity--->DB
 * 
 */


package com.krvinay.controller;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;

import com.krvinay.dto.MovieDto;
import com.krvinay.exceptions.ErrorDetails;
import com.krvinay.exceptions.ResourceNotFoundException;
import com.krvinay.serviceimpl.MovieServiceImpl;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/movie")
@AllArgsConstructor
public class MovieController {
	
	//used constructor injection rather than setter injection
	private MovieServiceImpl movieService;
	
	//localhost:8080/movie/add
	@PostMapping("/add")
	public ResponseEntity<MovieDto> add(@RequestBody MovieDto movie) {		
		
		/*String sampleRequest= 
				"{\r\n"
				+ "    \"name\": \"RRR\",\r\n"
				+ "    \"description\": \"xyz\",\r\n"
				+ "    \"artist\": \"vinay\",\r\n"
				+ "    \"email\": \"krvinay68@gmail.com\"\r\n"
				+ "}";*/
		
		MovieDto response = movieService.add(movie);
		return new ResponseEntity<MovieDto>(response,HttpStatus.CREATED);		
	}
	
	//localhost:8080/movie/getall
	@GetMapping("/getall")
	public ResponseEntity<List<MovieDto>> getAll() {	
	
		List<MovieDto> movie = movieService.gets();
		return new ResponseEntity<List<MovieDto>>(movie,HttpStatus.OK);		
	}
	
	//localhost:8080/movie/get/1
	@GetMapping("/get/{id}")
	public ResponseEntity<MovieDto> getById(@PathVariable Long id) {			
		MovieDto movie = movieService.get(id);
		return new ResponseEntity<MovieDto>(movie,HttpStatus.OK);		
	}
	
	//localhost:8080/movie/update/1
	@PutMapping("/update/{id}")
	public ResponseEntity<MovieDto> updateById(@PathVariable Long id,@RequestBody MovieDto movie) {			
		
		/*String sampleRequest="{\r\n"
				+ "    \"name\": \"Gadar1\",\r\n"
				+ "    \"description\": \"gadar1\",\r\n"
				+ "    \"artist\": \"sunny deol\",\r\n"
				+ "    \"email\": \"krvinay@gmail.com\"\r\n"
				+ "}";*/
		
		movie.setId(id);
		MovieDto response = movieService.update(movie);
		return new ResponseEntity<MovieDto>(response,HttpStatus.OK);		
	}
	
	//localhost:8080/movie/delete/1
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<String> DeleteById(@PathVariable Long id) {								
		movieService.delete(id);
		return new ResponseEntity<String>("Data deleted", HttpStatus.OK);				
	}
	//localhost:8080/movie/patch
	@PatchMapping("/patch")
	public ResponseEntity<String> deleteTable() {
		return null;								
						
	}

	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<ErrorDetails> handleResourceNotFoundException(ResourceNotFoundException exception,
			                                                             WebRequest webRequest){
		
		
		ErrorDetails errorDetails=new ErrorDetails(
				
				LocalDateTime.now(),
				exception.getMessage(),
				webRequest.getDescription(false),
				"Date Not Found"
		);
		return new ResponseEntity<ErrorDetails>(errorDetails, HttpStatus.NOT_FOUND);
	}
}
